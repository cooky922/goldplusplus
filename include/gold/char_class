// <gold/char_class> - gold++ library

// Copyright (C) [ 2021 - 2022 ] - present Desmond Gold

#pragma once
#ifndef __GOLD_CHAR_CLASS
#define __GOLD_CHAR_CLASS

#include <initializer_list>
#include <bits/char_traits.h>

namespace gold {

    namespace __char_class {

        /// is_one_of
        template <typename T>
        constexpr bool is_one_of(T c, std::initializer_list<T> il) noexcept {
            for (T elem : il) {
                if (c == elem)
                    return true;
            }
            return false;
        }

    } // namespace __char_class

    /// basic_char_class
    template <typename CharT>
    struct basic_char_class {

        /// ::char_type
        using char_type = CharT;

        /// ::is_digit
        static constexpr bool is_digit(CharT c) noexcept {
            return c >= CharT('0') && c <= CharT('9');
        }
        /// :is_hexdigit
        static constexpr bool is_hexdigit(CharT c) noexcept {
            return is_digit(c) || (c >= CharT('a') && c <= CharT('f')) || (c >= CharT('A') && c <= CharT('F'));
        }
        /// ::is_blank
        static constexpr bool is_blank(CharT c) noexcept {
            return c == CharT(' ') || c == CharT('\t');
        }
        /// ::is_whitespace
        static constexpr bool is_whitespace(CharT c) noexcept {
            return c == CharT(' ')  ||
                   c == CharT('\t') ||
                   c == CharT('\n') ||
                   c == CharT('\v') ||
                   c == CharT('\f') ||
                   c == CharT('\r');
        }
        /// ::is_lower_alpha
        static constexpr bool is_lower_alpha(CharT c) noexcept {
            return c >= CharT('a') && c <= CharT('z');
        }
        /// ::is_upper_alpha
        static constexpr bool is_upper_alpha(CharT c) noexcept {
            return c >= CharT('A') && c <= CharT('Z');
        }
        /// ::is_alpha
        static constexpr bool is_alpha(CharT c) noexcept {
            return is_lower_alpha(c) || is_upper_alpha(c);
        }
        /// ::is_alnum
        static constexpr bool is_alnum(CharT c) noexcept {
            return is_alpha(c) || is_digit(c);
        }
        /// ::is_punct
        static constexpr bool is_punct(CharT c) noexcept {
            return __char_class::is_one_of(c, {
                CharT('!'), CharT('"'), CharT('#'), CharT('$'),
                CharT('%'), CharT('&'), CharT('\''), CharT('('),
                CharT(')'), CharT('*'), CharT('+'), CharT(','),
                CharT('-'), CharT('.'), CharT('/'), CharT(':'),
                CharT(';'), CharT('<'), CharT('='), CharT('>'),
                CharT('?'), CharT('@'), CharT('['), CharT('\\'),
                CharT(']'), CharT('^'), CharT('_'), CharT('`'),
                CharT('{'), CharT('|'), CharT('}'), CharT('~')
            });
        }
        /// ::is_graph
        static constexpr bool is_graph(CharT c) noexcept {
            return is_alnum(c) || is_punct(c);
        }
        /// ::is_printable
        static constexpr bool is_printable(CharT c) noexcept {
            return is_graph(c) || c == CharT(' ');
        }
        /// ::is_control
        static constexpr bool is_control(CharT c) noexcept {
            return c >= CharT('\x00') && c <= CharT('\x1f') || c == CharT('\x7f');
        }
        /// ::to_lower
        static constexpr CharT to_lower(CharT c) noexcept {
            return is_upper_alpha(c) ? c - CharT('A') + CharT('a') : c;
        }
        /// ::to_upper
        static constexpr CharT to_upper(CharT c) noexcept {
            return is_lower_alpha(c) ? c - CharT('a') + CharT('A') : c;
        }
    };

    /// char_class
    using char_class = basic_char_class<char>;

    /// wchar_class
    using wchar_class = basic_char_class<wchar_t>;

} // namespace gold

#endif // __GOLD_CHAR_CLASS
