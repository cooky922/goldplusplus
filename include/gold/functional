// <gold/functional> - gold++ library

// Copyright (C) [ 2021 - 2022 ] - present Desmond Gold

#pragma once
#ifndef __GOLD_FUNCTIONAL
#define __GOLD_FUNCTIONAL

#include <gold/bits/functional/bind_partial.hpp>
#include <gold/bits/functional/compose.hpp>
#include <gold/bits/functional/invoke.hpp>
#include <gold/bits/functional/try_invoke.hpp>
#include <gold/bits/functional/overload.hpp>
#include <gold/bits/functional/unref.hpp>
#include <gold/bits/functional/convert_as.hpp>
#include <gold/bits/functional/construct_object.hpp>

namespace gold {

    //// Overloading [ defined in <gold/bits/functional/overload.hpp> ]
    /// make_overload

    //// Invocation Operations
    /// invoke[_r]           [ defined in <gold/bits/functional/invoke.hpp>     ]
    /// consteval_invoke[_r] [ defined in <gold/bits/functional/invoke.hpp>     ]
    /// try_invoke           [ defined in <gold/bits/functional/try_invoke.hpp> ]

    //// Partial Application [ defined in <gold/bits/functional/bind_partial.hpp> ]
    /// bind_front
    /// bind_back
    /// bind_rest

    //// Function Composition [ defined in <gold/bits/functional/compose.hpp> ]
    /// compose

    //// Other Functional Utilities
    /// unref     [ defined in <gold/bits/functional/unref.hpp> ]
    /// void_like [ defined in <gold/bits/void_like.hpp>        ]

} // namespace gold

#endif // __GOLD_FUNCTIONAL
