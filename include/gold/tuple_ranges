// <gold/tuple_ranges> - gold++ library

// Copyright (C) 2021 - present Desmond Gold

#pragma once
#ifndef __GOLD_TUPLE_RANGES
#define __GOLD_TUPLE_RANGES

#include <ranges>
#include <compare>

#include <gold/bits/type_traits/helper_class.hpp>
#include <gold/bits/tuple/tuple_concepts.hpp>
#include <gold/bits/tuple/tuple_conversion.hpp>

namespace gold {

    /// tuple_range
    template <qualified_tuple T>
    class tuple_range {
      public:
        struct iterator;
        using sentinel_type = std::default_sentinel_t;
      private:
        T m_tup_;

        friend iterator;

      public:
        constexpr tuple_range() noexcept = default;
        constexpr tuple_range(const tuple_range&) noexcept = default;
        constexpr tuple_range(tuple_range&&) noexcept = default;
        constexpr tuple_range(const T& tup_) : m_tup_{tup_} {}

        template <typename... Ts>
        constexpr tuple_range(Ts&&... args)
        : m_tup_{std::forward<Ts>(args)...} {}

        constexpr tuple_range& operator=(const tuple_range&) noexcept = default;
        constexpr tuple_range& operator=(tuple_range&&) noexcept = default;

        template <std::size_t N>
        constexpr std::tuple_element_t<N, T>&
        operator[](index_constant<N>) noexcept {
            return std::get<N>(m_tup_);
        }

        template <std::size_t N>
        constexpr const std::tuple_element_t<N, T>&
        operator[](index_constant<N>) const noexcept {
            return std::get<N>(m_tup_);
        }

        constexpr auto operator[](std::size_t i) & {
            return to_variant_ref_at(m_tup_, i);
        }

        constexpr auto operator[](std::size_t i) const& {
            return to_variant_ref_at(m_tup_, i);
        }

        constexpr auto operator[](std::size_t i) && {
            return to_variant_at(m_tup_, i);
        }

        constexpr auto operator[](std::size_t i) const&& {
            return to_variant_at(m_tup_, i);
        }

        constexpr auto size() const {
            return std::tuple_size_v<T>;
        }

        class iterator {
          private:
            T& tup_;
            std::size_t i_;

          public:
            constexpr iterator(T& t, std::size_t i)
            : tup_(t), i_(i) {}

            constexpr iterator& operator++() {
                ++i_;
                return *this;
            }

            constexpr iterator operator++(int) {
                auto temp_ = *this;
                ++i_;
                return temp_;
            }

            constexpr iterator& operator--() {
                --i_;
                return *this;
            }

            constexpr iterator operator--(int) {
                auto temp_ = *this;
                --i_;
                return temp_;
            }

            constexpr bool operator==(const iterator& other_) const {
                return (
                    std::addressof(other_.tup_) == std::addressof(tup_) &&
                    other_.i_ == i_
                );
            }

            constexpr bool operator==(sentinel_type) const {
                return i_ == std::tuple_size_v<T>;
            }

            constexpr auto operator*() const {
                return gold::to_variant_ref_at(tup_, i_);
            }

        };

        constexpr auto begin() {
            return iterator { m_tup_, 0 };
        }

        constexpr auto end() {
            return std::default_sentinel;
        }
    };

    /// deduction guides
    template <typename... Ts>
    tuple_range(Ts...) -> tuple_range<std::tuple<Ts...>>;

} // namespace gold

#endif // __GOLD_TUPLE_RANGES
