// <gold/inplace_vector> - gold++ library

// Copyright (C) [ 2021 - 2024 ] - present Desmond Gold

#pragma once
#ifndef __GOLD_INPLACE_VECTOR
#define __GOLD_INPLACE_VECTOR

#include <new>
#include <type_traits>
#include <gold/basic_types>
#include <gold/bits/__util/mini_array.hpp>
#include <gold/bits/algo/equal.hpp>
#include <gold/bits/algo/move_range.hpp>
#include <gold/bits/algo/synth3way.hpp>
#include <gold/bits/algo/rotate.hpp>
#include <gold/bits/memory/ops.hpp>
#include <gold/bits/ranges/from_range.hpp>
#include <bits/ranges_base.h>

namespace gold {

    namespace __ranges {

        /// __ranges::container_compatible_range
        template <typename R, typename T>
        concept container_compatible_range =
            std::ranges::input_range<R> &&
            std::convertible_to<std::ranges::range_reference_t<R>, T>;

    } // namespace __ranges

    namespace __cont {

        /// __cont::smallest_size_t
        template <std::size_t N>
        using smallest_size_t =
            __type_pack_element<
                (N < gold::uint8_t(-1)  ? 0 :
                 N < gold::uint16_t(-1) ? 1 :
                 N < gold::uint32_t(-1) ? 2 :
                 N < gold::uint64_t(-1) ? 3 : 4),
                gold::uint8_t,  // 0
                gold::uint16_t, // 1
                gold::uint32_t, // 2
                gold::uint64_t, // 3
                std::size_t     // 4
            >;

        /// __cont::aligned_storage_t
        template <typename T, std::size_t N>
        struct aligned_storage_t {
            alignas(T) std::byte m_data_[sizeof(T) * N];

            constexpr T* data(std::size_t i) noexcept {
                // pre: i < N
                return reinterpret_cast<T*>(m_data_) + i;
            }
            constexpr const T* data(std::size_t i) const noexcept {
                // pre: i < N
                return reinterpret_cast<const T*>(m_data_) + i;
            }
        };

        /// __cont::empty_storage
        template <typename T>
        struct empty_storage {
            using size_type = gold::uint8_t;

            static consteval T* data() noexcept
            { return nullptr; }

            static consteval size_type size() noexcept
            { return 0; }

            static consteval bool empty() noexcept
            { return true; }

            static constexpr void mf_unsafe_set_size_(std::size_t n) noexcept {
                if (n == 0) [[likely]]
                    return;
                __builtin_unreachable();
            }

            constexpr empty_storage() = default;
            constexpr empty_storage(const empty_storage&) = default;
            constexpr empty_storage(empty_storage&&) = default;
            constexpr ~empty_storage() = default;
            constexpr empty_storage& operator=(const empty_storage&) = default;
            constexpr empty_storage& operator=(empty_storage&&) = default;
        };

        /// __cont::trivial_storage
        template <typename T, std::size_t N>
        struct trivial_storage {
            // T must be trivial type
            // N != 0
            using size_type = __cont::smallest_size_t<N>;
            using data_t    = __type_pack_element<
                int(std::is_const_v<T>), __util::mini_array<T, N>, const __util::mini_array<std::remove_const_t<T>, N>>;

            alignas(alignof(T)) data_t m_data_;
            size_type m_size_ = 0;

            constexpr T* data() noexcept
            { return m_data_.data(); }

            constexpr const T* data() const noexcept
            { return m_data_.data(); }

            constexpr size_type size() const noexcept
            { return m_size_; }

            constexpr bool empty() const noexcept
            { return m_size_ == 0; }

            constexpr void mf_unsafe_set_size_(std::size_t n) noexcept {
                if (n <= N) [[likely]] {
                    m_size_ = size_type(n);
                    return;
                }
                __builtin_unreachable();
            }

            constexpr trivial_storage() = default;
            constexpr trivial_storage(const trivial_storage&) = default;
            constexpr trivial_storage(trivial_storage&&) = default;
            constexpr ~trivial_storage() = default;
            constexpr trivial_storage& operator=(const trivial_storage&) = default;
            constexpr trivial_storage& operator=(trivial_storage&&) = default;
        };

        /// __cont::nontrivial_storage
        template <typename T, std::size_t N>
        struct nontrivial_storage {
            // T must be trivial type
            // N != 0
            using size_type = __cont::smallest_size_t<N>;
            using data_t    = __type_pack_element<
                int(std::is_const_v<T>), __cont::aligned_storage_t<T, N>, const __cont::aligned_storage_t<std::remove_const_t<T>, N>>;

            alignas(alignof(T)) data_t m_data_;
            size_type m_size_ = 0;

            constexpr T* data() noexcept
            { return m_data_.data(0); }

            constexpr const T* data() const noexcept
            { return m_data_.data(0); }

            constexpr size_type size() const noexcept
            { return m_size_; }

            constexpr bool empty() const noexcept
            { return m_size_ == 0; }

            constexpr void mf_unsafe_set_size_(std::size_t n) noexcept {
                if (n <= N) [[likely]] {
                    m_size_ = size_type(n);
                    return;
                }
                __builtin_unreachable();
            }

            constexpr nontrivial_storage() = default;
            constexpr nontrivial_storage(const nontrivial_storage&) = default;
            constexpr nontrivial_storage(nontrivial_storage&&) = default;
            constexpr ~nontrivial_storage() = default;
            constexpr nontrivial_storage& operator=(const nontrivial_storage&) = default;
            constexpr nontrivial_storage& operator=(nontrivial_storage&&) = default;
        };

        /// __cont::select_storage_t
        template <typename T, std::size_t N>
        using select_storage_t =
            __type_pack_element<
                (N == 0 ? 0 : std::is_trivial_v<T> ? 1 : 2),
                __cont::empty_storage<T>,
                __cont::trivial_storage<T, N>,
                __cont::nontrivial_storage<T, N>
            >;

    } // namespace __cont

    /// inplace_vector
    template <typename T, std::size_t N>
    class inplace_vector {
      private:
        using storage_type = __cont::select_storage_t<T, N>;

        [[no_unique_address]] storage_type m_data_;

        // TODO: add precondition checks

        constexpr void mf_unsafe_destroy_(T* first, T* last)
            noexcept(std::is_nothrow_destructible_v<T>)
        {
            // pre: first and last must be a valid range
            if constexpr (N > 0 && !std::is_trivial_v<T>)
                for (; first != last; ++first)
                    first->~T();
        }

        constexpr void mf_unsafe_set_size_(std::size_t n)
        { m_data_.mf_unsafe_set_size_(n); }

      public:
        using value_type = T;
        using reference  = T&;
        using const_reference = const T&;
        using pointer = T*;
        using const_pointer = const T*;
        using size_type = std::size_t;
        using iterator = pointer;
        using const_iterator = const_pointer;

        //// constructors
        constexpr inplace_vector() noexcept
        { mf_unsafe_set_size_(0); }

        constexpr ~inplace_vector()
        { clear(); }

        constexpr inplace_vector(const inplace_vector& other)
            requires std::copyable<T>
        {
            for (auto&& e : other)
                emplace_back(e);
        }

        constexpr inplace_vector(inplace_vector&& other)
            requires std::movable<T>
        {
            for (auto&& e : other)
                emplace_back(std::move(e));
        }

        constexpr inplace_vector(std::initializer_list<T> il)
            requires std::constructible_from<T, std::ranges::range_reference_t<std::initializer_list<T>>>
        { insert(begin(), il); }

        constexpr inplace_vector(size_type n, const T& val)
            requires std::constructible_from<T, const T&>
                  && std::copyable<T>
        { insert(begin(), n, val); }

        constexpr explicit inplace_vector(size_type n)
            requires std::default_initializable<T>
        {
            for (size_type i = 0; i != n; ++i)
                emplace_back();
        }

        template <typename Iter, typename Sent>
        constexpr inplace_vector(Iter first, Sent last)
            requires std::constructible_from<T, std::iter_reference_t<Iter>>
        { insert(begin(), first, last); }

        template <__ranges::container_compatible_range<T> R>
        constexpr inplace_vector(gold::from_range_t, R&& r)
            requires std::constructible_from<T, std::ranges::range_reference_t<R>>
                  && std::movable<T>
        { insert_range(begin(), std::forward<R>(r)); }

        //// assignments
        constexpr inplace_vector& operator=(const inplace_vector& other)
            requires std::copyable<T>
        {
            clear();
            for (auto&& e : other)
                emplace_back(e);
            return *this;
        }

        constexpr inplace_vector& operator=(inplace_vector&& other)
            requires std::movable<T>
        {
            clear();
            for (auto&& e : other)
                emplace_back(std::move(e));
            return *this;
        }

        template <typename Iter, typename Sent>
        constexpr void assign(Iter first, Sent last)
            requires std::constructible_from<T, std::iter_reference_t<Iter>>
                  && std::movable<T>
        {
            clear();
            insert(begin(), first, last);
        }

        template <__ranges::container_compatible_range<T> R>
        constexpr void assign_range(R&& r)
            requires std::constructible_from<T, std::ranges::range_reference_t<R>>
        { assign(std::ranges::begin(r), std::ranges::end(r)); }

        constexpr void assign(size_type n, const T& val)
            requires std::constructible_from<T, const T&>
                  && std::copyable<T>
        {
            clear();
            insert(begin(), n, val);
        }

        constexpr void assign(std::initializer_list<T> il)
            requires std::constructible_from<T, std::ranges::range_reference_t<std::initializer_list<T>>>
        {
            clear();
            insert(begin(), il);
        }

        //// iterator access
        constexpr iterator begin() noexcept
        { return data(); }

        constexpr const_iterator begin() const noexcept
        { return data(); }

        constexpr const_iterator cbegin() const noexcept
        { return data(); }

        constexpr iterator end() noexcept
        { return begin() + size(); }

        constexpr const_iterator end() const noexcept
        { return begin() + size(); }

        constexpr const_iterator cend() const noexcept
        { return cbegin() + size(); }

        //// data and element access
        constexpr pointer data() noexcept
        { return m_data_.data(); }

        constexpr const_pointer data() const noexcept
        { return m_data_.data(); }

        constexpr size_type size() const noexcept
        { return m_data_.size(); }

        constexpr bool empty() const noexcept
        { return capacity() == 0 || size() == 0; }

        constexpr bool full() const noexcept
        { return size() == capacity(); }

        static consteval size_type capacity() noexcept
        { return N; }

        static consteval size_type max_size() noexcept
        { return N; }

        constexpr reference operator[](size_type n)
        { return data()[n]; }

        constexpr const_reference operator[](size_type n) const
        { return data()[n]; }

        constexpr reference front()
        { return data()[0]; }

        constexpr const_reference front() const
        { return data()[0]; }

        constexpr reference back()
        { return data()[size() - 1]; }

        constexpr const_reference back() const
        { return data()[size() - 1]; }

        //// comparisons
        friend constexpr bool operator==(const inplace_vector& lhs,
                                         const inplace_vector& rhs) noexcept
        { return lhs.size() == rhs.size() && __algo::equal(lhs, rhs); }

        friend constexpr auto operator<=>(const inplace_vector& lhs,
                                          const inplace_vector& rhs) noexcept
            requires requires { typename __algo::synth3way_t<T>; }
        {
            using C = __algo::synth3way_t<T>;
            if (lhs.size() < rhs.size())
                return C::less;
            if (lhs.size() > rhs.size())
                return C::greater;

            bool all_equal = true;
            bool all_less  = true;

            for (size_type i = 0; i < lhs.size(); ++i) {
                if (lhs[i] < rhs[i]) all_equal = false;
                if (lhs[i] == rhs[i]) all_less = false;
            }

            if (all_equal)
                return C::equivalent;
            if (all_less)
                return C::less;
            return C::greater;
        }

        //// container insertions
        template <typename... Args>
            requires std::constructible_from<T, Args...>
        constexpr T& emplace_back(Args&&... args) {
            if (full()) [[unlikely]]
                throw std::bad_alloc();
            T* ptr = gold::construct_at(end(), std::forward<Args>(args)...);
            mf_unsafe_set_size_(size() + size_type(1));
            return *ptr;
        }

        template <typename... Args>
            requires std::constructible_from<T, Args...>
        constexpr T* try_emplace_back(Args&&... args) noexcept(std::is_nothrow_constructible_v<T, Args...>) {
            if (full()) [[unlikely]]
                return nullptr;
            T* ptr = gold::construct_at(end(), std::forward<Args>(args)...);
            mf_unsafe_set_size_(size() + size_type(1));
            return ptr;
        }

        constexpr T& push_back(const T& item)
        { return emplace_back(item); }

        constexpr T& push_back(T&& item)
        { return emplace_back(std::move(item)); }

        constexpr T* try_push_back(const T& item) noexcept(std::is_nothrow_copy_constructible_v<T>)
        { return try_emplace_back(item); }

        constexpr T* try_push_back(T&& item) noexcept(std::is_nothrow_move_constructible_v<T>)
        { return try_push_back(std::move(item)); }

        template <__ranges::container_compatible_range<T> R>
        constexpr void append_range(R&& r) {
            if constexpr (std::ranges::sized_range<R>)
                if (size() + std::ranges::size(r) > capacity()) [[unlikely]]
                    throw std::bad_alloc();
            for (auto&& elem : r) {
                if (full()) [[unlikely]]
                    throw std::bad_alloc();
                try_emplace_back(std::forward<decltype(elem)>(elem));
            }
        }

        template <typename R>
        constexpr bool try_append_range(R&& r)
            noexcept(std::is_nothrow_constructible_v<T, std::ranges::range_reference_t<R>>)
        {
            if constexpr (std::ranges::sized_range<R>)
                if (size() + std::ranges::size(r) > capacity()) [[unlikely]]
                    return false;
            for (auto&& elem : r) {
                if (full()) [[unlikely]]
                    return false;
                try_emplace_back(std::forward<decltype(elem)>(elem));
            }
            return true;
        }

        template <typename... Args>
            requires std::constructible_from<T, Args...>
                  && std::movable<T>
        constexpr iterator emplace(const_iterator position, Args&&... args) {
            // assert: 'position' is in valid range
            auto b = end();
            emplace_back(std::forward<Args>(args)...);
            auto pos = begin() + (position - begin());
            __algo::rotate(pos, b, end());
            return pos;
        }

        // TODO: add 'try_emplace'

        template <typename Iter, typename Sent>
        constexpr iterator insert(const_iterator position, Iter first, Sent last)
            requires std::constructible_from<T, std::iter_reference_t<Iter>> &&
                     std::movable<T>
        {
            // assert: ''position' is in valid range
            // assert: 'first' and 'last' form a valid range
            if constexpr (std::random_access_iterator<Iter>)
                if (size() + static_cast<size_type>(std::ranges::distance(first, last)) > capacity()) [[unlikely]]
                    throw std::bad_alloc();
            auto b = end();
            for (; first != last; ++first)
                emplace_back(std::move(*first));
            auto pos = begin() + (position - begin());
            __algo::rotate(pos, b, end());
            return pos;
        }

        template <__ranges::container_compatible_range<T> R>
        constexpr iterator insert_range(const_iterator position, R&& r)
            requires std::constructible_from<T, std::ranges::range_reference_t<R>>
                  && std::movable<T>
        { return insert(position, std::ranges::begin(r), std::ranges::end(r)); }

        constexpr iterator insert(const_iterator position, std::initializer_list<T> il)
            requires std::constructible_from<T, std::ranges::range_reference_t<std::initializer_list<T>>>
                  && std::movable<T>
        { return insert_range(position, il); }

        constexpr iterator insert(const_iterator position, size_type n, const T& val)
            requires std::constructible_from<T, const T&>
                  && std::copyable<T>
        {
            // assert: 'position' is in valid range
            auto b = end();
            for (size_type i = 0; i != n; ++i)
                emplace_back(val);
            auto pos = begin() + (position - begin());
            __algo::rotate(pos, b, end());
            return pos;
        }

        constexpr iterator insert(const_iterator position, const T& val)
            requires std::constructible_from<T, const T&>
                  && std::copyable<T>
        { return insert(position, 1, val); }

        constexpr iterator insert(const_iterator position, T&& val)
            requires std::constructible_from<T, T&&>
                  && std::movable<T>
        { return emplace(position, std::move(val)); }

        //// container erasure
        constexpr iterator erase(const_iterator first, const_iterator last)
            requires std::movable<T>
        {
            // assert: 'first' and 'last' form a valid range
            iterator f = begin() + (first - begin());
            if (first != last) {
                mf_unsafe_destroy_(__algo::move_range(f + (last - first), end(), f), end());
                mf_unsafe_set_size_(size() - static_cast<size_type>(last - first));
            }
            return f;
        }

        constexpr iterator erase(const_iterator position)
            requires std::movable<T>
        { return erase(position, position + 1); }

        constexpr void clear() noexcept {
            mf_unsafe_destroy_(begin(), end());
            mf_unsafe_set_size_(0);
        }

        constexpr void pop_back() {
            mf_unsafe_destroy_(end() - 1, end());
            mf_unsafe_set_size_(size() - 1);
        }

        constexpr bool try_pop_back() {
            if (empty()) [[unlikely]]
                return false;
            pop_back();
            return true;
        }

        //// other container operations
        constexpr void resize(size_type sz)
            requires std::default_initializable<T>
        {
            if (sz == size())
                return;
            else if (sz > N) [[unlikely]]
                throw std::bad_alloc();
            else if (sz > size()) {
                while (sz != size())
                    emplace_back();
            }
            else {
                mf_unsafe_destroy_(begin() + sz, end());
                mf_unsafe_set_size_(sz);
            }
        }

        constexpr bool try_resize(size_type sz)
            requires std::default_initializable<T>
        {
            if (sz == size())
                return true;
            else if (sz > N) [[unlikely]]
                return false;
            else if (sz > size()) {
                while (sz != size())
                    try_emplace_back();
            }
            else {
                mf_unsafe_destroy_(begin() + sz, end());
                mf_unsafe_set_size_(sz);
            }
            return true;
        }

        constexpr void resize(size_type sz, const T& val)
            requires std::constructible_from<T, const T&>
                  && std::copyable<T>
        {
            if (sz == size())
                return;
            else if (sz > N) [[unlikely]]
                throw std::bad_alloc();
            else if (sz > size())
                insert(end(), sz - size(), val);
            else {
                mf_unsafe_destroy_(begin() + sz, end());
                mf_unsafe_set_size_(sz);
            }
        }

        constexpr bool try_resize(size_type sz, const T& val)
            requires std::constructible_from<T, const T&>
                  && std::copyable<T>
        {
            if (sz == size())
                return true;
            else if (sz > N) [[unlikely]]
                return false;
            else if (sz > size())
                insert(end(), sz - size(), val);
            else {
                mf_unsafe_destroy_(begin() + sz, end());
                mf_unsafe_set_size_(sz);
            }
            return true;
        }

        constexpr void swap(inplace_vector& other)
            noexcept(N == 0 || (std::is_nothrow_swappable_v<T> && std::is_nothrow_move_constructible_v<T>))
        {
            auto tmp = std::move(other);
            other    = std::move(*this);
            *this    = std::move(tmp);
        }

        friend constexpr void swap(inplace_vector& lhs, inplace_vector& rhs)
            noexcept(noexcept(lhs.swap(rhs)))
        { lhs.swap(rhs); }
    };

    // TODO: gold::erase[_if] for gold::inplace_vector

} // namespace gold

#endif // __GOLD_INPLACE_VECTOR
