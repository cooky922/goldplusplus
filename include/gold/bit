// <gold/bit> - gold++ library

// Copyright (C) [ 2021 - 2024 ] - present Desmond Gold

#pragma once
#ifndef __GOLD_BIT
#define __GOLD_BIT

#include <bit>
#include <array>
#include <gold/basic_types>
#include <gold/bits/concepts/types.hpp>

namespace gold {

    /// bit_reverse
    template <std::unsigned_integral T>
    constexpr T bit_reverse(T x) noexcept {
        // TODO: optimize
        T result = 0;
        // assume: CHAR_BIT == 8 and T has no padding
        for (int i = 0; i < 8 * sizeof(T); ++i) {
            result <<= 1;
            result  |= x & 1;
            x >>= 1;
        }
        return result;
    }

    /// bit_repeat
    template <std::unsigned_integral T>
    constexpr T bit_repeat(T x, int n) noexcept {
        // TODO: optimize
        T result = 0;
        for (int i = 0; i < 8 * sizeof(T); ++i) {
            result |= ((x >> (i % n)) & 1) << i;
        }
        return result;
    }

    /// next_bit_permutation
    template <std::unsigned_integral T>
    constexpr T next_bit_permutation(T x) noexcept {
        const int c = std::popcount(x);
        while (x != 0 && std::popcount(++x) != c);
        return x;
    }

    /// prev_bit_permutation
    template <std::unsigned_integral T>
    constexpr T prev_bit_permutation(T x) noexcept {
        const int c = std::popcount(x);
        while (x != 0 && std::popcount(--x) != c);
        return x;
    }

    /// bit_compressr
    template <std::unsigned_integral T>
    constexpr T bit_compressr(T x, T m) noexcept {
        T result = 0;
        for (int i = 0, j = 0; i < 8 * sizeof(T); ++i) {
            bool mask_bit = (m >> i) & 1;
            result |= (mask_bit & (x >> i)) << j;
            j += mask_bit;
        }
        return result;
    }

    /// bit_compressl
    template <std::unsigned_integral T>
    constexpr T bit_compressl(T x, T m) noexcept {
        return gold::bit_reverse(gold::bit_compressr(gold::bit_reverse(x), gold::bit_reverse(m)));
    }

    /// bit_expandr
    template <std::unsigned_integral T>
    constexpr T bit_expandr(T x, T m) noexcept {
        T result = 0;
        for (int i = 0, j = 0; i < 8 * sizeof(T); ++i) {
            bool mask_bit = (m >> i) & 1;
            result |= (mask_bit & (x >> j)) << i;
            j += mask_bit;
        }
        return result;
    }

    /// bit_expandl
    template <std::unsigned_integral T>
    constexpr T bit_expandl(T x, T m) noexcept {
        return gold::bit_reverse(gold::bit_expandr(gold::bit_reverse(x), gold::bit_reverse(m)));
    }

    /// to_bytes
    template <gold::trivially_copyable T>
    constexpr auto to_bytes(const T& obj) noexcept {
        return std::bit_cast<
            std::array<const std::byte, sizeof(T)>
        >(obj);
    }

    /// to_writable_bytes
    template <gold::trivially_copyable T>
    constexpr auto to_writable_bytes(T&& obj) noexcept {
        return std::bit_cast<
            std::array<std::byte, sizeof(T)>
        >(std::forward<T>(obj));
    }

    /// from_bytes
    template <gold::trivially_copyable T, std::size_t N>
        requires (sizeof(T) == N)
    constexpr auto from_bytes(std::array<std::byte, N> arr) noexcept {
        return std::bit_cast<T>(arr);
    }

    template <gold::trivially_copyable T, std::size_t N>
        requires (sizeof(T) == N)
    constexpr auto from_bytes(std::array<const std::byte, N> arr) noexcept {
        return std::bit_cast<const T>(arr);
    }

} // namespace gold

#endif // __GOLD_BIT
