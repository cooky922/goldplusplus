// <gold/dynamic_library> - gold++ library

// Copyright (C) [ 2021 - 2022 ] - present Desmond Gold

#pragma once
#ifndef __GOLD_DYNAMIC_LIBRARY
#define __GOLD_DYNAMIC_LIBRARY

#include <string>
#include <span>
#include <stdexcept>
#include <gold/basic_types>

namespace gold {

    /// dynamic_library_error
    class dynamic_library_error : std::runtime_error {
      public:
        explicit dynamic_library_error(const char* s)
        : std::runtime_error(s) {}

        explicit dynamic_library_error(const std::string& s)
        : std::runtime_error(s) {}

        virtual ~dynamic_library_error() noexcept = default;
    };

    /// dl_module
    class dl_module;

    /// dl_symbol
    class dl_symbol {
      public:
        /// native_handle_type
        using native_handle_type = long long int (*) ();

      private:
        /// member data
        native_handle_type m_symbol_;

        /// private ctor
        constexpr dl_symbol() noexcept = default;
        constexpr dl_symbol(native_handle_type arg) noexcept
        : m_symbol_(arg) {}

        /// friend decl.
        friend class dl_module;

        template <typename T>
        friend T* dl_symbol_cast(const dl_symbol*) noexcept;

      public:
        /// .native_handle
        native_handle_type native_handle() const noexcept { return m_symbol_; }

        /// .to_address
        const void* to_address() const noexcept { return reinterpret_cast<void*>(m_symbol_); }

        /// .operator bool
        explicit operator bool() const noexcept { return static_cast<bool>(m_symbol_); }
    };

    /// dl_symbol_cast
    template <typename T>
    T* dl_symbol_cast(const dl_symbol* op) noexcept {
        return reinterpret_cast<T*>(op->m_symbol_);
    }

    template <typename T>
    T& dl_symbol_cast(const dl_symbol& op) {
        if (auto result = dll_symbol_cast<T>(&op); result)
            return *result;
        throw dynamic_library_error("invalid 'dl_symbol_cast' operation");
    }

    /// dl_module
    class dl_module {
      private:
        inline static constexpr std::size_t s_max_size_  = 128;
        inline static constexpr std::size_t s_max_align_ = 8;

        /// member data
        alignas(s_max_align_) std::byte m_data_[s_max_size_] { };

      public:
        /// constructors
        dl_module() = default;
        explicit dl_module(std::string_view);
        dl_module(const dl_module&) = delete;
        dl_module(dl_module&&) noexcept;

        /// destructor
        ~dl_module() noexcept;

        /// assignments
        dl_module& operator=(const dl_module&) = delete;
        dl_module& operator=(dl_module&&) noexcept;

        //// Observers
        /// has_value
        bool has_value() const noexcept;

        /// operator bool
        explicit operator bool() const noexcept;

        //// Modifiers
        /// swap
        void swap(dl_module&) noexcept;
        friend void swap(dl_module& lhs, dl_module& rhs) noexcept { lhs.swap(rhs); }

        /// reset
        void reset();
        void reset(std::string_view);

        //// Symbols Access
        /// base_address
        const void* base_address() const;

        /// entry_point_address
        const void* entry_point_address() const;

        /// size
        std::size_t size() const;

        /// name [ synonymous to 'module_name' ]
        std::string_view name() const;

        /// module_name
        std::string_view module_name() const;

        /// image_name
        std::string_view image_name() const;

        /// symbol_names
        std::span<const std::string> symbol_names() const;

        /// symbols
        std::span<gold::dl_symbol> symbols() const;

        /// symbol
        gold::dl_symbol symbol(std::string_view) const;

        /// entity_ptr
        template <typename T>
        T* entity_ptr(std::string_view sym) const noexcept {
            auto sym_result = this->symbol(sym);
            return dl_symbol_cast<T>(&sym_result);
        }

        /// entity
        template <typename T>
        T& entity(std::string_view sym) const {
            if (auto result = this->template entity_ptr<T>(sym); result)
                return *result;
            throw dynamic_library_error("invalid 'symbol_as' operation");
        }

        /// entity_invoke
        template <typename R, typename... Args>
        decltype(auto) entity_invoke(std::string_view sym, Args&&... args) const {
            return this->template entity<R(Args...)>(sym)(std::forward<Args>(args)...);
        }

        //// Comparisons
        /// operator==
        bool operator==(const dl_module&) const noexcept = default;

        /// operator<=>
        auto operator<=>(const dl_module&) const noexcept = default;

    };

} // namespace gold

#endif // __GOLD_DYNAMIC_LIBRARY
